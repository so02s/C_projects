#include "_matrix.h"
#include <check.h>
#include <time.h>

#define STAT_FAIL 1
#define STAT_OK 0
#define STAT_CALC_ERR 2

#test transpose_squere
{
    matrix_t A = {0}, result = {0};
    double k = 1;
    int t = 10;

    _create_matrix(t, t, &A);

    for(int i = 0; i<t; i++)
        for(int j = 0; j<t; j++){
            A.matrix[i][j] = k;
            k++;
        }

    int status = _transpose(&A, &result);
    ck_assert_int_eq(status, 0);

    k = 1;
    for(int i = 0; i<t; i++)
        for(int j = 0; j<t; j++){
            ck_assert_double_eq(result.matrix[j][i], k);
            k++;
    }

    _remove_matrix(&A);
    _remove_matrix(&result);
}

#test transpose_rectangle
{
    matrix_t A = {0}, result = {0};
    double k = 1;

    _create_matrix(5, 2, &A);

    for(int i = 0; i<A.rows; i++)
        for(int j = 0; j<A.columns; j++){
            A.matrix[i][j] = k;
            k++;
        }

    int status = _transpose(&A, &result);
    ck_assert_int_eq(status, STAT_OK);

    _remove_matrix(&A);
    _remove_matrix(&result);
}


#test transpose_errors
{
    matrix_t A = {0}, result = {0};

    int status = _transpose(&A, &result);
    ck_assert_int_eq(status, STAT_FAIL);

    _remove_matrix(&A);
    _remove_matrix(&result);
}

#test create_remove_errors
{
    matrix_t M = {0};
    int res = _create_matrix(-5, 3, &M); // negative
    ck_assert_int_eq(res, STAT_FAIL);
    res = _create_matrix(5, -3, &M); // negative
    ck_assert_int_eq(res, STAT_FAIL);
    res = _create_matrix(5, 3, NULL); // null
    ck_assert_int_eq(res, STAT_FAIL);

    // double creation
    res = _create_matrix(3, 4, &M);
    ck_assert_int_eq(res, STAT_OK);
    res = _create_matrix(4, 5, &M);
    ck_assert_int_eq(res, STAT_OK);

    _remove_matrix(&M);
    _remove_matrix(NULL);
}

#test _eq_matrix_test
{
    matrix_t A = {0}, B = {0};

    int status = _eq_matrix(&A, &B);
    ck_assert_int_eq(status, FAIL);
    _create_matrix(3, 7, &A);
    status = _eq_matrix(&A, &B);
    ck_assert_int_eq(status, FAIL);
    _create_matrix(3, 7, &B);
    status = _eq_matrix(NULL, &B);
    ck_assert_int_eq(status, FAIL);
    status = _eq_matrix(&A, &B);
    ck_assert_int_eq(status, SUCCESS);

    double k = 1;
    for(int i = 0; i<A.rows; i++)
        for(int j = 0; j<A.columns; j++){
            A.matrix[i][j] = k;
            k++;
        }
    
    status = _eq_matrix(&A, &B);
    ck_assert_int_eq(status, FAIL);

    _create_matrix(2, 4, &B);

    status = _eq_matrix(&A, &B);
    ck_assert_int_eq(status, FAIL);


    _remove_matrix(&A);
    _remove_matrix(&B);
}

#test _sum_matrix_test
{
    matrix_t A = {0}, result = {0};
    int t = 2;

    _create_matrix(t, t, &A);

    A.matrix[0][0] = -5;
    A.matrix[0][1] =  6;
    A.matrix[1][0] = 33;
    A.matrix[1][1] = 43;
    
    int res = _sum_matrix(&A, &A, &result);
    ck_assert_int_eq(res, STAT_OK);

    for(int i = 0; i<t; i++)
        for(int j = 0; j<t; j++)
            ck_assert_double_eq(result.matrix[i][j], A.matrix[i][j]*2);

    _remove_matrix(&A);
    _remove_matrix(&result);
}

#test _sum_matrix_errors
{
    matrix_t A = {0}, B = {0}, result = {0};
    int t = 2;

    _create_matrix(t, t, &A);
    _create_matrix(t, 1, &B);
    
    int res = _sum_matrix(&A, &B, &result);
    ck_assert_int_eq(res, STAT_CALC_ERR);
    res = _sum_matrix(NULL, &B, &result);
    ck_assert_int_eq(res, STAT_FAIL);

    _remove_matrix(&A);
    _remove_matrix(&B);
    _remove_matrix(&result);
}


#test _sub_matrix_test
{
    matrix_t A = {0}, B = {0}, result = {0};
    int t = 2;

    _create_matrix(t, t, &A);
    _create_matrix(t, t, &B);

    A.matrix[0][0] = -5;
    A.matrix[0][1] =  6;
    A.matrix[1][0] = 33;
    A.matrix[1][1] = 43;

    B.matrix[0][0] = 23;
    B.matrix[0][1] = 43;
    B.matrix[1][0] =  3;
    B.matrix[1][1] =  4;
    
    _sub_matrix(&B, &A, &result);

    for(int i = 0; i<t; i++)
        for(int j = 0; j<t; j++)
            ck_assert_double_eq(result.matrix[i][j], B.matrix[i][j] - A.matrix[i][j]);

    _remove_matrix(&A);
    _remove_matrix(&B);
    _remove_matrix(&result);
}


#test _sub_matrix_errors
{
    matrix_t A = {0}, B = {0}, result = {0};
    int t = 2;

    _create_matrix(t, t, &A);
    _create_matrix(t, 1, &B);
    
    int res = _sub_matrix(&A, &B, &result);
    ck_assert_int_eq(res, STAT_CALC_ERR);
    res = _sub_matrix(NULL, &B, &result);
    ck_assert_int_eq(res, STAT_FAIL);

    _remove_matrix(&A);
    _remove_matrix(&B);
    _remove_matrix(&result);
}

#test _mult_number_test
{
    matrix_t A = {0}, result = {0};
    int t = 3;
    double k = 1.1;

    int res = _mult_number(&A, (double)t, &result);
    ck_assert_int_eq(res, STAT_FAIL);

    _create_matrix(t, t, &A);

    for(int i = 0; i<t; i++)
        for(int j = 0; j<t; j++){
            A.matrix[i][j] = k;
            k++;
        }    

    res = _mult_number(&A, 0.437852, &result);
    ck_assert_int_eq(res, STAT_OK);
    
    k = 1.1;
    for(int i = 0; i<t; i++)
        for(int j = 0; j<t; j++){
            ck_assert_double_eq(result.matrix[i][j], k*0.437852);
            k++;
        }

    _remove_matrix(&A);
    _remove_matrix(&result);
}



#test _determinant_test
{
    matrix_t A = {0};
    int t = 3;
    double determ = 0;

    int res = _determinant(&A, &determ);
    ck_assert_int_eq(res, STAT_FAIL);

    _create_matrix(t, 2, &A);

    res = _determinant(&A, &determ);
    ck_assert_int_eq(res, STAT_CALC_ERR);
    
    _create_matrix(t, t, &A);
    
    A.matrix[0][0] = 0;
    A.matrix[0][1] = 1;
    A.matrix[0][2] = 2;
    A.matrix[1][0] = 9;
    A.matrix[1][1] = 10;
    A.matrix[1][2] = 54;
    A.matrix[2][0] = 0;
    A.matrix[2][1] = 1;
    A.matrix[2][2] = 1;

    res = _determinant(&A, &determ);
    ck_assert_int_eq(res, STAT_OK);
    
    ck_assert_double_eq(determ, 9);

    _create_matrix(1, 1, &A);
    A.matrix[0][0] = 1;
    res = _determinant(&A, &determ);
    ck_assert_int_eq(res, STAT_OK);
    ck_assert_double_eq(determ, 1.0);

    _remove_matrix(&A);
}

#test _mult_matrix_test
{
    matrix_t A = {0}, B = {0}, result = {0};

    int res = _mult_matrix(&A, &B, &result);
    ck_assert_int_eq(res, STAT_FAIL);

    _create_matrix(1, 2, &A);
    _create_matrix(1, 2, &B);
    res = _mult_matrix(&A, &B, &result);
    ck_assert_int_eq(res, STAT_CALC_ERR);

    _create_matrix(2, 3, &A);
    _create_matrix(3, 4, &B);
    
    A.matrix[0][0] = 5;
    A.matrix[0][1] = 1;
    A.matrix[0][2] = 2;
    A.matrix[1][0] = 20;
    A.matrix[1][1] = 21;
    A.matrix[1][2] = 22;

    B.matrix[0][0] = 5;
    B.matrix[0][1] = 1;
    B.matrix[0][2] = 2;
    B.matrix[0][3] = 2;
    B.matrix[1][0] = 20;
    B.matrix[1][1] = 21;
    B.matrix[1][2] = 22;
    B.matrix[1][3] = 22;
    B.matrix[2][0] = 0;
    B.matrix[2][1] = 1;
    B.matrix[2][2] = 7;
    B.matrix[2][3] = 15;

    res = _mult_matrix(&A, &B, &result);
    ck_assert_int_eq(res, STAT_OK);
    
    ck_assert_double_eq(result.matrix[0][0], 45);
    ck_assert_double_eq(result.matrix[0][1], 28);
    ck_assert_double_eq(result.matrix[0][2], 46);
    ck_assert_double_eq(result.matrix[0][3], 62);
    ck_assert_double_eq(result.matrix[1][0], 520);
    ck_assert_double_eq(result.matrix[1][1], 483);
    ck_assert_double_eq(result.matrix[1][2], 656);
    ck_assert_double_eq(result.matrix[1][3], 832);

    _remove_matrix(&A);
    _remove_matrix(&B);
    _remove_matrix(&result);
}


#test _calc_complements_test
{
    matrix_t A = {0}, M = {0};
    int t = 3;

    int res = _calc_complements(&A, &M);
    ck_assert_int_eq(res, STAT_FAIL);

    _create_matrix(t, 2, &A);

    res = _calc_complements(&A, &M);
    ck_assert_int_eq(res, STAT_CALC_ERR);
    
    _create_matrix(t, t, &A);
    
    A.matrix[0][0] = 0;
    A.matrix[0][1] = 1;
    A.matrix[0][2] = 2;
    A.matrix[1][0] = 9;
    A.matrix[1][1] = 10;
    A.matrix[1][2] = 54;
    A.matrix[2][0] = 0;
    A.matrix[2][1] = 1;
    A.matrix[2][2] = 1;

    res = _calc_complements(&A, &M);
    ck_assert_int_eq(res, STAT_OK);

    ck_assert_double_eq(M.matrix[0][0], -44);
    ck_assert_double_eq(M.matrix[0][1], 9);
    ck_assert_double_eq(M.matrix[0][2], 9);
    ck_assert_double_eq(M.matrix[1][0], -1);
    ck_assert_double_eq(M.matrix[1][1], 0);
    ck_assert_double_eq(M.matrix[1][2], 0);
    ck_assert_double_eq(M.matrix[2][0], 34);
    ck_assert_double_eq(M.matrix[2][1], -18);
    ck_assert_double_eq(M.matrix[2][2], -9);

    _create_matrix(1, 1, &A);
    A.matrix[0][0] = 1;
    res = _calc_complements(&A, &M);
    ck_assert_int_eq(res, STAT_OK);
    ck_assert_float_eq(M.matrix[0][0], 1.0);

    _remove_matrix(&A);
    _remove_matrix(&M);
}

#test _inverse_matrix_test
{
    matrix_t A = {0}, B = {0};
    int t = 3;

    int res = _inverse_matrix(&A, &B);
    ck_assert_int_eq(res, STAT_FAIL);

    _create_matrix(t, 2, &A);

    res = _inverse_matrix(&A, &B);
    ck_assert_int_eq(res, STAT_CALC_ERR);
    
    _create_matrix(1, 1, &A);

    res = _inverse_matrix(&A, &B);
    ck_assert_int_eq(res, STAT_CALC_ERR);

    _create_matrix(t, t, &A);
    
    A.matrix[0][0] = 0;
    A.matrix[0][1] = 1;
    A.matrix[0][2] = 2;
    A.matrix[1][0] = 9;
    A.matrix[1][1] = 10;
    A.matrix[1][2] = 54;
    A.matrix[2][0] = 0;
    A.matrix[2][1] = 1;
    A.matrix[2][2] = 1;

    res = _inverse_matrix(&A, &B);
    ck_assert_int_eq(res, STAT_OK);

    ck_assert_double_eq_tol(B.matrix[0][0], -44/9, 5);
    ck_assert_double_eq_tol(B.matrix[0][1], 1/9, 5);
    ck_assert_double_eq_tol(B.matrix[0][2], 34/9, 5);
    ck_assert_double_eq_tol(B.matrix[1][0], -1, 5);
    ck_assert_double_eq_tol(B.matrix[1][1], 0, 5);
    ck_assert_double_eq_tol(B.matrix[1][2], 2, 5);
    ck_assert_double_eq_tol(B.matrix[2][0], 1, 5);
    ck_assert_double_eq_tol(B.matrix[2][1], 0, 5);
    ck_assert_double_eq_tol(B.matrix[2][2], -1, 5);

    _create_matrix(1, 1, &A);
    A.matrix[0][0] = 1;
    res = _inverse_matrix(&A, &B);
    ck_assert_int_eq(res, STAT_OK);
    ck_assert_float_eq(B.matrix[0][0], 1.0);

    _remove_matrix(&A);
    _remove_matrix(&B);
}