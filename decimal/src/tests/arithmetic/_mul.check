#include "_decimal.h"

#test mul_1
{
    int res = 0;
    _decimal *dec = init_decimal(), *dec2 = init_decimal(), *result = init_decimal();
    dec->bits[0] = 123;
    dec2->bits[0] = 456;
    res = _mul(*dec, *dec2, result);
    ck_assert_int_eq(result->bits[0], 56088); // 123 * 456 = 56088
    ck_assert_int_eq(res, 0);
    
    free(dec);free(dec2);free(result);
    
    
}

#test mul_2
{
    int res = 0;
    _decimal *dec = init_decimal(), *dec2 = init_decimal(), *result = init_decimal();
    dec->bits[0] = 168368;
    dec2->bits[0] = 873576;
    res = _mul(*dec, *dec2, result);
    // Assuming the expected result is 97404684992 (123456 * 789012)
    ck_assert_int_eq(result->bits[0], 1053355904); // least significant bits
    ck_assert_int_eq(result->bits[1], 34);    // next bits
    ck_assert_int_eq(res, 0);
    
    free(dec);free(dec2);free(result);
    
    
}

#test mul_3
{
    int res = 0;
    _decimal *dec = init_decimal(), *dec2 = init_decimal(), *result = init_decimal();
    dec->bits[0] = 10;
    dec2->bits[0] = 5;
    res = _mul(*dec, *dec2, result);
    ck_assert_int_eq(result->bits[0], 50); // 10 * 5 = 50
    ck_assert_int_eq(res, 0);
    
    free(dec);free(dec2);free(result);
    
}

#test mul_4
{
    int res = 0;
    _decimal *dec = init_decimal(), *dec2 = init_decimal(), *result = init_decimal();
    dec->bits[0] = 10;
    dec2->bits[0] = 5;
    set_sign(dec2, 1);
    res = _mul(*dec, *dec2, result);
    ck_assert_int_eq(result->bits[0], 50); // 10 * (-5) = -50
    ck_assert_int_eq(get_sign(*result), 1);
    ck_assert_int_eq(res, 0);
    
    free(dec);free(dec2);free(result);
    
}

#test mul_5
{
    int res = 0;
    _decimal *dec = init_decimal(), *dec2 = init_decimal(), *result = init_decimal();
    dec->bits[0] = 10;
    dec2->bits[0] = 5;
    set_sign(dec, 1);
    set_sign(dec2, 1);
    res = _mul(*dec, *dec2, result);
    ck_assert_int_eq(result->bits[0], 50); // (-10) * (-5) = 50
    ck_assert_int_eq(get_sign(*result), 0);
    ck_assert_int_eq(res, 0);
    
    free(dec);free(dec2);free(result);
    
}

#test mul_6
{
    int res = 0;
    _decimal *dec = init_decimal(), *dec2 = init_decimal(), *result = init_decimal();    dec->bits[0] = 0;
    dec2->bits[0] = 5;
    res = _mul(*dec, *dec2, result);
    ck_assert_int_eq(result->bits[0], 0); // 0 * 5 = 0
    ck_assert_int_eq(res, 0);
    
    free(dec);free(dec2);free(result);
    
}

#test mul_7
{
    int res = 0;
    _decimal *dec = init_decimal(), *dec2 = init_decimal(), *result = init_decimal();
    dec->bits[0] = 0;
    dec2->bits[0] = 5;
    set_sign(dec2, 1);
    res = _mul(*dec, *dec2, result);
    ck_assert_int_eq(result->bits[0], 0); // 0 * (-5) = 0
    ck_assert_int_eq(res, 0);
    
    free(dec);free(dec2);free(result);
    
}

#test mul_8
{
    int res = 0;
    _decimal *dec = init_decimal(), *dec2 = init_decimal(), *result = init_decimal();
    dec->bits[0] = 5;
    dec2->bits[0] = 0;
    res = _mul(*dec, *dec2, result);
    ck_assert_int_eq(result->bits[0], 0); // 5 * 0 = 0
    ck_assert_int_eq(res, 0);
    
    free(dec);free(dec2);free(result);
    
}

#test mul_9 
{
  _decimal value_1 = {.bits[0] = 0x00000001,
                         .bits[1] = 0x00000000,
                         .bits[2] = 0x00000000,
                         .bits[3] = 0x80000000};  //-1

  _decimal value_2 = {.bits[0] = 0x00000001,
                         .bits[1] = 0x00000000,
                         .bits[2] = 0x00000000,
                         .bits[3] = 0x80000000};  // -1

  _decimal reference_result = {.bits[0] = 0x00000001,
                                  .bits[1] = 0x00000000,
                                  .bits[2] = 0x00000000,
                                  .bits[3] = 0x00000000};  // 1
  _decimal result = {0};
  int sub_result = _mul(value_1, value_2, &result);
  ck_assert_int_eq(sub_result, 0);
  ck_assert_int_eq(result.bits[0], reference_result.bits[0]);
  ck_assert_int_eq(result.bits[1], reference_result.bits[1]);
  ck_assert_int_eq(result.bits[2], reference_result.bits[2]);
  ck_assert_int_eq(result.bits[3], reference_result.bits[3]);
}

#test MUL_TEST1
{
  _decimal ds;
  ds.bits[2] = 0x00000000;
  ds.bits[1] = 0x00000000;
  ds.bits[0] = 0x00000001;
  ds.bits[3] = 0x00010000;
  _decimal ds2;
  ds2.bits[2] = 0x00000000;
  ds2.bits[1] = 0x00000000;
  ds2.bits[0] = 0x00000002;
  ds2.bits[3] = 0x00000000;
  _decimal res;
  int ret = _mul(ds, ds2, &res);
  ck_assert(ret == 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[1], 0);
  ck_assert_int_eq(res.bits[0], 2);
  ck_assert_int_eq(res.bits[3], 0x00010000);
}
END_TEST

#test MUL_TEST2
{
  _decimal ds;
  ds.bits[2] = 0x00000000;
  ds.bits[1] = 0x00000000;
  ds.bits[0] = 0xffffffff;
  ds.bits[3] = 0x80000000;
  _decimal ds2;
  ds2.bits[2] = 0x00000000;
  ds2.bits[1] = 0x00000000;
  ds2.bits[0] = 0x00000002;
  ds2.bits[3] = 0x00000000;
  _decimal res;
  int ret = _mul(ds, ds2, &res);
  ck_assert(ret == 0);
  ck_assert_int_eq(res.bits[2], 0);
  ck_assert_int_eq(res.bits[1], 0x00000001);
  ck_assert_int_eq(res.bits[0], 0xfffffffe);
  ck_assert_int_eq(res.bits[3], 0x80000000);
  ds.bits[2] = 0xffffffff;
  ret = _mul(ds, ds2, &res);
  ck_assert_int_eq(ret,2);
}
END_TEST

#test MUL_TEST3
{
  _decimal ds;
  ds.bits[2] = 0x0bffffff;
  ds.bits[1] = 0xffffffff;
  ds.bits[0] = 0xffffffff;
  ds.bits[3] = 0x00000000;
  _decimal ds2;
  ds2.bits[2] = 0x13ffffff;
  ds2.bits[1] = 0xffffffff;
  ds2.bits[0] = 0xffffffff;
  ds2.bits[3] = 0x00000000;
  _decimal res;
  int ret = _mul(ds, ds2, &res);
  ck_assert_int_eq(ret,1);
  ds.bits[3] = 0x001c0000;
  ds2.bits[3] = 0x001c0000;
  ret = _mul(ds, ds2, &res);
  ck_assert_int_eq(ret,0);
}



