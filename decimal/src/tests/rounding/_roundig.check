
#test round_1
{
    int check = 0;
    _decimal dec, dec2, resd;
    null_decimal(&dec);
    null_decimal(&dec2);
    float number =  5.5, res = 6;
    _from_float_to_decimal(number, &dec);
    _from_float_to_decimal(res, &dec2);
    check = _round(dec, &resd);
    int compare = _compare(&dec2, &resd);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(check, 0);
}

#test round_2
{
    int check = 0;
    _decimal dec, dec2, resd;
    null_decimal(&dec);
    null_decimal(&dec2);
    float number =  5.0, res = 5;
    _from_float_to_decimal(number, &dec);
    _from_float_to_decimal(res, &dec2);
    check = _round(dec, &resd);
    int compare = _compare(&dec2, &resd);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(check, 0);
}

#test round_3
{
    int check = 0;
    _decimal dec, dec2, resd;
    null_decimal(&dec);
    null_decimal(&dec2);
    float number =  -5.0, res = -5;
    _from_float_to_decimal(number, &dec);
    _from_float_to_decimal(res, &dec2);
    check = _round(dec, &resd);
    int compare = _compare(&dec2, &resd);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(check, 0);
}

#test round_4
{
    int check = 0;
    _decimal dec, dec2, resd;
    null_decimal(&dec);
    null_decimal(&dec2);
    float number =  -5.5, res = -6;
    _from_float_to_decimal(number, &dec);
    _from_float_to_decimal(res, &dec2);
    check = _round(dec, &resd);
    int compare = _compare(&dec2, &resd);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(check, 0);
}

#test round_5
{
    int check = 0;
    _decimal dec, dec2, resd;
    null_decimal(&dec);
    null_decimal(&dec2);
    float number =  345.543, res = 346;
    _from_float_to_decimal(number, &dec);
    _from_float_to_decimal(res, &dec2);
    check = _round(dec, &resd);
    int compare = _compare(&dec2, &resd);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(check, 0);
}

#test round_6
{
    int check = 0;
    _decimal dec, dec2, resd;
    null_decimal(&dec);
    null_decimal(&dec2);
    float number =  -345.543, res = -346;
    _from_float_to_decimal(number, &dec);
    _from_float_to_decimal(res, &dec2);
    check = _round(dec, &resd);
    int compare = _compare(&dec2, &resd);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(check, 0);
}

#test round_7
{
    int check = 0;
    _decimal dec, dec2, resd;
    null_decimal(&dec);
    null_decimal(&dec2);
    float number =  -0.543, res = -1;
    _from_float_to_decimal(number, &dec);
    _from_float_to_decimal(res, &dec2);
    check = _round(dec, &resd);
    int compare = _compare(&dec2, &resd);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(check, 0);
}

#test round_8
{
    int check = 0;
    _decimal dec, dec2, resd;
    null_decimal(&dec);
    null_decimal(&dec2);
    float number =  0.543, res = 1;
    _from_float_to_decimal(number, &dec);
    _from_float_to_decimal(res, &dec2);
    check = _round(dec, &resd);
    int compare = _compare(&dec2, &resd);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(check, 0);
}

#test round_9
{
    int check = 0;
    _decimal dec, dec2, resd;
    null_decimal(&dec);
    null_decimal(&dec2);
    float number =  0.49, res = 0;
    _from_float_to_decimal(number, &dec);
    _from_float_to_decimal(res, &dec2);
    check = _round(dec, &resd);
    int compare = _compare(&dec2, &resd);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(check, 0);
}

#test round_10
{
    int check = 0;
    _decimal dec, dec2, resd;
    null_decimal(&dec);
    null_decimal(&dec2);
    float number =  -0.49, res = -0;
    _from_float_to_decimal(number, &dec);
    _from_float_to_decimal(res, &dec2);
    check = _round(dec, &resd);
    int compare = _compare(&dec2, &resd);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(check, 0);
}

#test round_11
{
  _decimal a = {{0x9ab8b17f, 0xec91eb14, 0x3e2129ce, 0x80140000}};
  _decimal res;
  _decimal expected = {{0x0b75fc1a, 0x00000000, 0x00000000, 0x80000000}};
  int _ret = _round(a, &res);
  int expected_ret = 0;
  ck_assert_int_eq(_ret, expected_ret);
  ck_assert_mem_eq(&expected, &res, 4 * sizeof(uint32_t));
}

#test round_12
{
  _decimal a = {{0xc7df0000, 0x4a028ace, 0x4b11543e, 0x00150000}};
  _decimal res;
  _decimal expected = {{0x01627f45, 0x00000000, 0x00000000, 0x00000000}};
  int _ret = _round(a, &res);
  int expected_ret = 0;
  ck_assert_int_eq(_ret, expected_ret);
  ck_assert_mem_eq(&expected, &res, 4 * sizeof(uint32_t));
}

#test round_13
{
 _decimal a = {{0x57ef0000, 0x2aa64d34, 0x6ef839c0, 0x800a0000}};
  _decimal res;
  _decimal expected = {{0x974109c0, 0x2fa93d6f, 0x00000000, 0x80000000}};
  int _ret = _round(a, &res);
  int expected_ret = 0;
  ck_assert_int_eq(_ret, expected_ret);
  ck_assert_mem_eq(&expected, &res, 4 * sizeof(uint32_t));
}

#test round_14
{
    _decimal a = {{0xc21f0000, 0x84e3bbf7, 0x723bc2fa, 0x00090000}};
  _decimal res;
  _decimal expected = {{0x2d459980, 0xeaa0fff5, 0x00000001, 0x00000000}};
  int _ret = _round(a, &res);
  int expected_ret = 0;
  ck_assert_int_eq(_ret, expected_ret);
  ck_assert_mem_eq(&expected, &res, 4 * sizeof(uint32_t));
}

#test round_15
{
  _decimal a = {{0x2c4f0000, 0xdf212abb, 0x757f4c34, 0x80080000}};
  _decimal res;
  _decimal expected = {{0x74082f00, 0xb677ff90, 0x00000013, 0x80000000}};
  int _ret = _round(a, &res);
  int expected_ret = 0;
  ck_assert_int_eq(_ret, expected_ret);
  ck_assert_mem_eq(&expected, &res, 4 * sizeof(uint32_t));
}

#test round_16
{
  _decimal a = {{0x967f0000, 0x395e997e, 0x78c2d56f, 0x00070000}};
  _decimal res;
  _decimal expected = {{0x6173b600, 0x9a7bfb83, 0x000000ca, 0x00000000}};
  int _ret = _round(a, &res);
  int expected_ret = 0;
  ck_assert_int_eq(_ret, expected_ret);
  ck_assert_mem_eq(&expected, &res, 4 * sizeof(uint32_t));
}

#test round_17
{
 _decimal a = {{0x57e3f000, 0x3a7b1eb0, 0x000100ad, 0x801c0000}};
  _decimal res;
  _decimal expected = {{0x00000000, 0x00000000, 0x00000000, 0x00000000}};
  int _ret = _round(a, &res);
  int expected_ret = 0;
  ck_assert_int_eq(_ret, expected_ret);
  ck_assert_mem_eq(&expected, &res, 4 * sizeof(uint32_t));
}

#test round_18
{
  _decimal a = {{0xf535e9f0, 0x000e5ab9, 0x00000000, 0x801c0000}};
  _decimal res;
  _decimal expected = {{0x00000000, 0x00000000, 0x00000000, 0x00000000}};
  int _ret = _round(a, &res);
  int expected_ret = 0;
  ck_assert_int_eq(_ret, expected_ret);
  ck_assert_mem_eq(&expected, &res, 4 * sizeof(uint32_t));
}

