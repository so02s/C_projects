#include "_decimal.h"

// 14354
#test truncate_1
{
    int res = 0;
    _decimal dec, result, answer;
    null_decimal(&dec);
    null_decimal(&result);
    null_decimal(&answer);
    int number = 14354;
    _from_int_to_decimal(number, &dec);
    number = 14354;
    _from_int_to_decimal(number, &answer);
    res = _truncate(dec, &result);

    int sign_1 = get_sign(result);
    ck_assert_int_eq(sign_1, 0);

    int compare = _compare(&result, &answer);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(res, 0);
}

// 143.54
#test truncate_2
{
    int res = 0;
    _decimal dec, result, answer;
    null_decimal(&dec);
    null_decimal(&result);
    null_decimal(&answer);
    int number = 14354;
    _from_int_to_decimal(number, &dec);
    set_scale(&dec, 2);
    number = 143;
    _from_int_to_decimal(number, &answer);
    res = _truncate(dec, &result);

    int sign_1 = get_sign(result);
    ck_assert_int_eq(sign_1, 0);

    int compare = _compare(&result, &answer);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(res, 0);
}

// -143.54
#test truncate_3
{
    int res = 0;
    _decimal dec, result, answer;
    null_decimal(&dec);
    null_decimal(&result);
    null_decimal(&answer);
    int number = -14354;
    _from_int_to_decimal(number, &dec);
    set_scale(&dec, 2);
    number = -143;
    _from_int_to_decimal(number, &answer);
    res = _truncate(dec, &result);

    int sign_1 = get_sign(result);
    ck_assert_int_eq(sign_1, 1);

    int compare = _compare(&result, &answer);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(res, 0);
}

// супер большое положительное число
#test truncate_4
{
    int res = 0;
    _decimal dec, result, answer;
    null_decimal(&dec);
    null_decimal(&result);
    null_decimal(&answer);
    dec.bits[0] = 36555555;
    dec.bits[1] = 100;
    dec.bits[2] = 263;
    set_scale(&dec, 5);
    answer.bits[0] = 4249784605;
    answer.bits[1] = 11295763;
    res = _truncate(dec, &result);

    int sign_1 = get_sign(result);
    ck_assert_int_eq(sign_1, 0);

    int compare = _compare(&result, &answer);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(res, 0);
}

// 0.98
#test truncate_5
{
    int res = 0;
    _decimal dec, result, answer;
    null_decimal(&dec);
    null_decimal(&result);
    null_decimal(&answer);
    int number = 98;
    _from_int_to_decimal(number, &dec);
    set_scale(&dec, 2);
    number = 0;
    _from_int_to_decimal(number, &answer);
    res = _truncate(dec, &result);

    int sign_1 = get_sign(result);
    ck_assert_int_eq(sign_1, 0);

    int compare = _compare(&result, &answer);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(res, 0);
}


// -0.539
#test truncate_6
{
    int res = 0;
    _decimal dec, result, answer;
    null_decimal(&dec);
    null_decimal(&result);
    null_decimal(&answer);
    int number = -539;
    _from_int_to_decimal(number, &dec);
    set_scale(&dec, 3);
    number = 0;
    _from_int_to_decimal(number, &answer);
    res = _truncate(dec, &result);

    int sign_1 = get_sign(result);
    ck_assert_int_eq(sign_1, 0);

    int compare = _compare(&result, &answer);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(res, 0);
}

// 654000.846
#test truncate_7
{
    int res = 0;
    _decimal dec, result, answer;
    null_decimal(&dec);
    null_decimal(&result);
    null_decimal(&answer);
    int number = 654000846;
    _from_int_to_decimal(number, &dec);
    set_scale(&dec, 3);
    number = 654000;
    _from_int_to_decimal(number, &answer);
    res = _truncate(dec, &result);

    int sign_1 = get_sign(result);
    ck_assert_int_eq(sign_1, 0);

    int compare = _compare(&result, &answer);
    ck_assert_int_eq(compare, 0);
    ck_assert_int_eq(res, 0);
}





#test _truncate_8
{
    
    static _decimal arr[] = {
    {{0x00000000, 0x00000000, 0x00000000, 0x00000000}},  // 0
    {{0x00000001, 0x00000000, 0x00000000, 0x00000000}},  // 1
    {{0x00000001, 0x00000000, 0x00000000, 0x80000000}},  // -1
    {{0xCF5C048C, 0x004D2BEF, 0x00000000, 0x00070000}},  // 2172188218.2812812
    {{0xFEADBDA2, 0x000001FB, 0x00000000, 0x80060000}},  // -2181821.218210
    {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
      0x00000000}},  // 79228162514264337593543950335
    {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
      0x80000000}},  // -79228162514264337593543950335
    {{0x00000000, 0x00000000, 0x00000000, 0x00020000}},  // 0.00
    {{0x000F4240, 0x00000000, 0x00000000, 0x00020000}},  // 10000.00
    {{0x000F4240, 0x00000000, 0x00000000, 0x80020000}},  // -10000.00
    {{0x00000467, 0x0000007A, 0x00000000, 0x00040000}},  // 52398601.1239
    {{0x00000467, 0x0000007A, 0x00000000, 0x80000000}},  // -523986011239
    {{0x00000467, 0x0000007A, 0x00003215,
      0x00010000}},  // 23650570576955414727997.5
    {{0x00000467, 0x0000007A, 0x00205FF0,
      0x80020000}},  // -391386782621189641642978.31
    {{0x000F4240, 0x00002710, 0x00002710,
      0x80050000}},  // -1844674407800451901.20000
    {{0x0000000E, 0x00000000, 0x00000000, 0x00000000}},  // 14
    {{0x0000000F, 0x00000000, 0x00000000, 0x80000000}},  // -15
    {{0x000186A0, 0x00000000, 0x00000000, 0x00000000}},  // 100000
    {{0x0000000B, 0x00000000, 0x00000000, 0x00010000}},  // 1.1
    {{0x0000000B, 0x00000000, 0x00000000, 0x80010000}},  // -1.1
    {{0x0000000F, 0x00000000, 0x00000000, 0x80010000}},  // -1.5
    {{0x0000000F, 0x00000000, 0x00000000, 0x00010000}},  // 1.5
    {{0x00000086, 0x00000000, 0x00000000, 0x80020000}},  // -1.34
    {{0x00000086, 0x00000000, 0x00000000, 0x00020000}},  // 1.34
    {{0x000006E5, 0x00000000, 0x00000000, 0x00030000}},  // 1.765
    {{0x000006E5, 0x00000000, 0x00000000, 0x80030000}},  // -1.765
    {{0x00000019, 0x00000000, 0x00000000, 0x00010000}},  // 2.5
    {{0x00000019, 0x00000000, 0x00000000, 0x80010000}},  // -2.5
    {{0x1FC40A5F, 0xA98FD4BE, 0x00000000,
      0x00020000}},  // 122182182271212611.51
    {{0x1FC40A5D, 0xA98FD4BE, 0x00000000,
      0x00020000}},  // 122182182271212611.49
    {{0x1FC40A5F, 0xA98FD4BE, 0x00000000,
      0x80020000}},  // -122182182271212611.51
    {{0x1FC40A5D, 0xA98FD4BE, 0x00000000,
      0x80020000}},  // -122182182271212611.49
    {{0x075BCD15, 0x00000000, 0x00000000, 0x00030000}},  // 123456.789
    {{0x075BCD15, 0x00000000, 0x00000000, 0x00090000}},  // 0.123456789
    {{0x075BCD15, 0x00000000, 0x00000000, 0x00120000}},  // 0.000000000123456789
    {{0x075BCD15, 0x00000000, 0x00000000,
      0x001B0000}},  // 0.000000000000000000123456789
    {{0xFFFFFFFF, 0x00000000, 0x00000000, 0x00060000}},  // 4294.967295
    {{0xFFFFFFFF, 0xFFFFFFFF, 0x00000000,
      0x00050000}},  // 184467440737095.51615
    {{0xFFFFFFFF, 0x00000000, 0x00000000, 0x80060000}},  // -4294.967295
    {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
      0x001C0000}},  // 7.9228162514264337593543950335
    {{0xFFFFFFFF, 0xFFFFFFFF, 0x00000000,
      0x80050000}},  // -184467440737095.51615
    {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
      0x801C0000}},  // -7.9228162514264337593543950335
};
static _decimal result[] = {
    {{0x00000000, 0x00000000, 0x00000000, 0x00000000}},  // 0
    {{0x00000001, 0x00000000, 0x00000000, 0x00000000}},  // 1
    {{0x00000001, 0x00000000, 0x00000000, 0x80000000}},  //-1
    {{0x8178F63A, 0x00000000, 0x00000000, 0x00000000}},  // 2172188218
    {{0x00214ABD, 0x00000000, 0x00000000, 0x80000000}},  //-2181821
    {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
      0x00000000}},  // 79228162514264337593543950335
    {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
      0x80000000}},  //-79228162514264337593543950335
    {{0x00000000, 0x00000000, 0x00000000, 0x00000000}},  // 0
    {{0x00002710, 0x00000000, 0x00000000, 0x00000000}},  // 10000
    {{0x00002710, 0x00000000, 0x00000000, 0x80000000}},  //-10000
    {{0x031F8A09, 0x00000000, 0x00000000, 0x00000000}},  // 52398601
    {{0x00000467, 0x0000007A, 0x00000000, 0x80000000}},  //-523986011239
    {{0xCCCCCD3D, 0x199999A5, 0x00000502,
      0x00000000}},  // 23650570576955414727997
    {{0xBD70A3E2, 0x1EB851EC, 0x000052E1,
      0x80000000}},  //-391386782621189641642978
    {{0xB333333D, 0x19999999, 0x00000000, 0x80000000}},
    //-1844674407800451901
    {{0x0000000E, 0x00000000, 0x00000000, 0x00000000}},  // 14
    {{0x0000000F, 0x00000000, 0x00000000, 0x80000000}},  //-15
    {{0x000186A0, 0x00000000, 0x00000000, 0x00000000}},  // 100000
    {{0x00000001, 0x00000000, 0x00000000, 0x00000000}},  // 1
    {{0x00000001, 0x00000000, 0x00000000, 0x80000000}},  //-1
    {{0x00000001, 0x00000000, 0x00000000, 0x80000000}},  //-1
    {{0x00000001, 0x00000000, 0x00000000, 0x00000000}},  // 1
    {{0x00000001, 0x00000000, 0x00000000, 0x80000000}},  //-1
    {{0x00000001, 0x00000000, 0x00000000, 0x00000000}},  // 1
    {{0x00000001, 0x00000000, 0x00000000, 0x00000000}},  // 1
    {{0x00000001, 0x00000000, 0x00000000, 0x80000000}},  //-1
    {{0x00000002, 0x00000000, 0x00000000, 0x00000000}},  // 2
    {{0x00000002, 0x00000000, 0x00000000, 0x80000000}},  //-2
    {{0x24285C43, 0x01B2140C, 0x00000000, 0x00000000}},  // 122182182271212611
    {{0x24285C43, 0x01B2140C, 0x00000000, 0x00000000}},  // 122182182271212611
    {{0x24285C43, 0x01B2140C, 0x00000000, 0x80000000}},  //-122182182271212611
    {{0x24285C43, 0x01B2140C, 0x00000000, 0x80000000}},  //-122182182271212611
    {{0x0001E240, 0x00000000, 0x00000000, 0x00000000}},  // 123456
    {{0x00000000, 0x00000000, 0x00000000, 0x00000000}},  // 0
    {{0x00000000, 0x00000000, 0x00000000, 0x00000000}},  // 0
    {{0x00000000, 0x00000000, 0x00000000, 0x00000000}},  // 0
    {{0x000010C6, 0x00000000, 0x00000000, 0x00000000}},  // 4294
    {{0xAC471B47, 0x0000A7C5, 0x00000000, 0x00000000}},  // 184467440737095
    {{0x000010C6, 0x00000000, 0x00000000, 0x80000000}},  //-4294
    {{0x00000007, 0x00000000, 0x00000000, 0x00000000}},  // 7
    {{0xAC471B47, 0x0000A7C5, 0x00000000, 0x80000000}},  //-184467440737095
    {{0x00000007, 0x00000000, 0x00000000, 0x80000000}},  //-7
};
  for (size_t i = 0; i < sizeof(arr) / sizeof(_decimal); ++i) {
    _decimal tmp;
    int ret = _truncate(arr[i], &tmp);
    ck_assert_int_eq(tmp.bits[0], result[i].bits[0]);
    ck_assert_int_eq(tmp.bits[1], result[i].bits[1]);
    ck_assert_int_eq(tmp.bits[2], result[i].bits[2]);
    ck_assert_int_eq(tmp.bits[3], result[i].bits[3]);
    ck_assert_int_eq(ret, 0);
  }
}

